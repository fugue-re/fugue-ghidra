// automatically generated by the FlatBuffers compiler, do not modify

package fugue.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Segment extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Segment getRootAsSegment(ByteBuffer _bb) { return getRootAsSegment(_bb, new Segment()); }
  public static Segment getRootAsSegment(ByteBuffer _bb, Segment obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Segment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long address() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long size() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long addressSize() { int o = __offset(10); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long alignment() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long bits() { int o = __offset(14); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public boolean endian() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean code() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean data() { int o = __offset(20); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean external() { int o = __offset(22); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean readable() { int o = __offset(24); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean writable() { int o = __offset(26); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean executable() { int o = __offset(28); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public int bytes(int j) { int o = __offset(30); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int bytesLength() { int o = __offset(30); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector bytesVector() { return bytesVector(new ByteVector()); }
  public ByteVector bytesVector(ByteVector obj) { int o = __offset(30); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer bytesAsByteBuffer() { return __vector_as_bytebuffer(30, 1); }
  public ByteBuffer bytesInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 30, 1); }
  public int auxiliary(int j) { int o = __offset(32); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int auxiliaryLength() { int o = __offset(32); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector auxiliaryVector() { return auxiliaryVector(new ByteVector()); }
  public ByteVector auxiliaryVector(ByteVector obj) { int o = __offset(32); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer auxiliaryAsByteBuffer() { return __vector_as_bytebuffer(32, 1); }
  public ByteBuffer auxiliaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 32, 1); }

  public static int createSegment(FlatBufferBuilder builder,
      int nameOffset,
      long address,
      long size,
      long address_size,
      long alignment,
      long bits,
      boolean endian,
      boolean code,
      boolean data,
      boolean external,
      boolean readable,
      boolean writable,
      boolean executable,
      int bytesOffset,
      int auxiliaryOffset) {
    builder.startTable(15);
    Segment.addAddress(builder, address);
    Segment.addAuxiliary(builder, auxiliaryOffset);
    Segment.addBytes(builder, bytesOffset);
    Segment.addBits(builder, bits);
    Segment.addAlignment(builder, alignment);
    Segment.addAddressSize(builder, address_size);
    Segment.addSize(builder, size);
    Segment.addName(builder, nameOffset);
    Segment.addExecutable(builder, executable);
    Segment.addWritable(builder, writable);
    Segment.addReadable(builder, readable);
    Segment.addExternal(builder, external);
    Segment.addData(builder, data);
    Segment.addCode(builder, code);
    Segment.addEndian(builder, endian);
    return Segment.endSegment(builder);
  }

  public static void startSegment(FlatBufferBuilder builder) { builder.startTable(15); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addAddress(FlatBufferBuilder builder, long address) { builder.addLong(1, address, 0L); }
  public static void addSize(FlatBufferBuilder builder, long size) { builder.addInt(2, (int)size, (int)0L); }
  public static void addAddressSize(FlatBufferBuilder builder, long addressSize) { builder.addInt(3, (int)addressSize, (int)0L); }
  public static void addAlignment(FlatBufferBuilder builder, long alignment) { builder.addInt(4, (int)alignment, (int)0L); }
  public static void addBits(FlatBufferBuilder builder, long bits) { builder.addInt(5, (int)bits, (int)0L); }
  public static void addEndian(FlatBufferBuilder builder, boolean endian) { builder.addBoolean(6, endian, false); }
  public static void addCode(FlatBufferBuilder builder, boolean code) { builder.addBoolean(7, code, false); }
  public static void addData(FlatBufferBuilder builder, boolean data) { builder.addBoolean(8, data, false); }
  public static void addExternal(FlatBufferBuilder builder, boolean external) { builder.addBoolean(9, external, false); }
  public static void addReadable(FlatBufferBuilder builder, boolean readable) { builder.addBoolean(10, readable, false); }
  public static void addWritable(FlatBufferBuilder builder, boolean writable) { builder.addBoolean(11, writable, false); }
  public static void addExecutable(FlatBufferBuilder builder, boolean executable) { builder.addBoolean(12, executable, false); }
  public static void addBytes(FlatBufferBuilder builder, int bytesOffset) { builder.addOffset(13, bytesOffset, 0); }
  public static int createBytesVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createBytesVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startBytesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addAuxiliary(FlatBufferBuilder builder, int auxiliaryOffset) { builder.addOffset(14, auxiliaryOffset, 0); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startAuxiliaryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endSegment(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Segment get(int j) { return get(new Segment(), j); }
    public Segment get(Segment obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

