// automatically generated by the FlatBuffers compiler, do not modify

package fugue.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Function extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Function getRootAsFunction(ByteBuffer _bb) { return getRootAsFunction(_bb, new Function()); }
  public static Function getRootAsFunction(ByteBuffer _bb, Function obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Function __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String symbol() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer symbolAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer symbolInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public long address() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long entry() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public fugue.schema.BasicBlock blocks(int j) { return blocks(new fugue.schema.BasicBlock(), j); }
  public fugue.schema.BasicBlock blocks(fugue.schema.BasicBlock obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int blocksLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public fugue.schema.BasicBlock.Vector blocksVector() { return blocksVector(new fugue.schema.BasicBlock.Vector()); }
  public fugue.schema.BasicBlock.Vector blocksVector(fugue.schema.BasicBlock.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public fugue.schema.InterRef references(int j) { return references(new fugue.schema.InterRef(), j); }
  public fugue.schema.InterRef references(fugue.schema.InterRef obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int referencesLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public fugue.schema.InterRef.Vector referencesVector() { return referencesVector(new fugue.schema.InterRef.Vector()); }
  public fugue.schema.InterRef.Vector referencesVector(fugue.schema.InterRef.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int auxiliary(int j) { int o = __offset(14); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int auxiliaryLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector auxiliaryVector() { return auxiliaryVector(new ByteVector()); }
  public ByteVector auxiliaryVector(ByteVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer auxiliaryAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer auxiliaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }

  public static int createFunction(FlatBufferBuilder builder,
      int symbolOffset,
      long address,
      long entry,
      int blocksOffset,
      int referencesOffset,
      int auxiliaryOffset) {
    builder.startTable(6);
    Function.addEntry(builder, entry);
    Function.addAddress(builder, address);
    Function.addAuxiliary(builder, auxiliaryOffset);
    Function.addReferences(builder, referencesOffset);
    Function.addBlocks(builder, blocksOffset);
    Function.addSymbol(builder, symbolOffset);
    return Function.endFunction(builder);
  }

  public static void startFunction(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addSymbol(FlatBufferBuilder builder, int symbolOffset) { builder.addOffset(0, symbolOffset, 0); }
  public static void addAddress(FlatBufferBuilder builder, long address) { builder.addLong(1, address, 0L); }
  public static void addEntry(FlatBufferBuilder builder, long entry) { builder.addLong(2, entry, 0L); }
  public static void addBlocks(FlatBufferBuilder builder, int blocksOffset) { builder.addOffset(3, blocksOffset, 0); }
  public static int createBlocksVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startBlocksVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReferences(FlatBufferBuilder builder, int referencesOffset) { builder.addOffset(4, referencesOffset, 0); }
  public static int createReferencesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startReferencesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAuxiliary(FlatBufferBuilder builder, int auxiliaryOffset) { builder.addOffset(5, auxiliaryOffset, 0); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startAuxiliaryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endFunction(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Function get(int j) { return get(new Function(), j); }
    public Function get(Function obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

