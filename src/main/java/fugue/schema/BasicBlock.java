// automatically generated by the FlatBuffers compiler, do not modify

package fugue.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class BasicBlock extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static BasicBlock getRootAsBasicBlock(ByteBuffer _bb) { return getRootAsBasicBlock(_bb, new BasicBlock()); }
  public static BasicBlock getRootAsBasicBlock(ByteBuffer _bb, BasicBlock obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public BasicBlock __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long address() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long size() { int o = __offset(6); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public long architecture() { int o = __offset(8); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public fugue.schema.IntraRef predecessors(int j) { return predecessors(new fugue.schema.IntraRef(), j); }
  public fugue.schema.IntraRef predecessors(fugue.schema.IntraRef obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int predecessorsLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public fugue.schema.IntraRef.Vector predecessorsVector() { return predecessorsVector(new fugue.schema.IntraRef.Vector()); }
  public fugue.schema.IntraRef.Vector predecessorsVector(fugue.schema.IntraRef.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public fugue.schema.IntraRef successors(int j) { return successors(new fugue.schema.IntraRef(), j); }
  public fugue.schema.IntraRef successors(fugue.schema.IntraRef obj, int j) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int successorsLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public fugue.schema.IntraRef.Vector successorsVector() { return successorsVector(new fugue.schema.IntraRef.Vector()); }
  public fugue.schema.IntraRef.Vector successorsVector(fugue.schema.IntraRef.Vector obj) { int o = __offset(12); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public int auxiliary(int j) { int o = __offset(14); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int auxiliaryLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector auxiliaryVector() { return auxiliaryVector(new ByteVector()); }
  public ByteVector auxiliaryVector(ByteVector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer auxiliaryAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer auxiliaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }

  public static int createBasicBlock(FlatBufferBuilder builder,
      long address,
      long size,
      long architecture,
      int predecessorsOffset,
      int successorsOffset,
      int auxiliaryOffset) {
    builder.startTable(6);
    BasicBlock.addAddress(builder, address);
    BasicBlock.addAuxiliary(builder, auxiliaryOffset);
    BasicBlock.addSuccessors(builder, successorsOffset);
    BasicBlock.addPredecessors(builder, predecessorsOffset);
    BasicBlock.addArchitecture(builder, architecture);
    BasicBlock.addSize(builder, size);
    return BasicBlock.endBasicBlock(builder);
  }

  public static void startBasicBlock(FlatBufferBuilder builder) { builder.startTable(6); }
  public static void addAddress(FlatBufferBuilder builder, long address) { builder.addLong(0, address, 0L); }
  public static void addSize(FlatBufferBuilder builder, long size) { builder.addInt(1, (int)size, (int)0L); }
  public static void addArchitecture(FlatBufferBuilder builder, long architecture) { builder.addInt(2, (int)architecture, (int)0L); }
  public static void addPredecessors(FlatBufferBuilder builder, int predecessorsOffset) { builder.addOffset(3, predecessorsOffset, 0); }
  public static int createPredecessorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPredecessorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addSuccessors(FlatBufferBuilder builder, int successorsOffset) { builder.addOffset(4, successorsOffset, 0); }
  public static int createSuccessorsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSuccessorsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addAuxiliary(FlatBufferBuilder builder, int auxiliaryOffset) { builder.addOffset(5, auxiliaryOffset, 0); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startAuxiliaryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endBasicBlock(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public BasicBlock get(int j) { return get(new BasicBlock(), j); }
    public BasicBlock get(BasicBlock obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

