// automatically generated by the FlatBuffers compiler, do not modify

package fugue.schema;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Metadata extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Metadata getRootAsMetadata(ByteBuffer _bb) { return getRootAsMetadata(_bb, new Metadata()); }
  public static Metadata getRootAsMetadata(ByteBuffer _bb, Metadata obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Metadata __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String inputFormat() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer inputFormatAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer inputFormatInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String inputPath() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer inputPathAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer inputPathInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public int inputMd5(int j) { int o = __offset(8); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int inputMd5Length() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector inputMd5Vector() { return inputMd5Vector(new ByteVector()); }
  public ByteVector inputMd5Vector(ByteVector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer inputMd5AsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer inputMd5InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public int inputSha256(int j) { int o = __offset(10); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int inputSha256Length() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector inputSha256Vector() { return inputSha256Vector(new ByteVector()); }
  public ByteVector inputSha256Vector(ByteVector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer inputSha256AsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer inputSha256InByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public long inputSize() { int o = __offset(12); return o != 0 ? (long)bb.getInt(o + bb_pos) & 0xFFFFFFFFL : 0L; }
  public String exporter() { int o = __offset(14); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer exporterAsByteBuffer() { return __vector_as_bytebuffer(14, 1); }
  public ByteBuffer exporterInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 14, 1); }
  public int auxiliary(int j) { int o = __offset(16); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int auxiliaryLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteVector auxiliaryVector() { return auxiliaryVector(new ByteVector()); }
  public ByteVector auxiliaryVector(ByteVector obj) { int o = __offset(16); return o != 0 ? obj.__assign(__vector(o), bb) : null; }
  public ByteBuffer auxiliaryAsByteBuffer() { return __vector_as_bytebuffer(16, 1); }
  public ByteBuffer auxiliaryInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 1); }

  public static int createMetadata(FlatBufferBuilder builder,
      int input_formatOffset,
      int input_pathOffset,
      int input_md5Offset,
      int input_sha256Offset,
      long input_size,
      int exporterOffset,
      int auxiliaryOffset) {
    builder.startTable(7);
    Metadata.addAuxiliary(builder, auxiliaryOffset);
    Metadata.addExporter(builder, exporterOffset);
    Metadata.addInputSize(builder, input_size);
    Metadata.addInputSha256(builder, input_sha256Offset);
    Metadata.addInputMd5(builder, input_md5Offset);
    Metadata.addInputPath(builder, input_pathOffset);
    Metadata.addInputFormat(builder, input_formatOffset);
    return Metadata.endMetadata(builder);
  }

  public static void startMetadata(FlatBufferBuilder builder) { builder.startTable(7); }
  public static void addInputFormat(FlatBufferBuilder builder, int inputFormatOffset) { builder.addOffset(0, inputFormatOffset, 0); }
  public static void addInputPath(FlatBufferBuilder builder, int inputPathOffset) { builder.addOffset(1, inputPathOffset, 0); }
  public static void addInputMd5(FlatBufferBuilder builder, int inputMd5Offset) { builder.addOffset(2, inputMd5Offset, 0); }
  public static int createInputMd5Vector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createInputMd5Vector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startInputMd5Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addInputSha256(FlatBufferBuilder builder, int inputSha256Offset) { builder.addOffset(3, inputSha256Offset, 0); }
  public static int createInputSha256Vector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createInputSha256Vector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startInputSha256Vector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addInputSize(FlatBufferBuilder builder, long inputSize) { builder.addInt(4, (int)inputSize, (int)0L); }
  public static void addExporter(FlatBufferBuilder builder, int exporterOffset) { builder.addOffset(5, exporterOffset, 0); }
  public static void addAuxiliary(FlatBufferBuilder builder, int auxiliaryOffset) { builder.addOffset(6, auxiliaryOffset, 0); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, byte[] data) { return builder.createByteVector(data); }
  public static int createAuxiliaryVector(FlatBufferBuilder builder, ByteBuffer data) { return builder.createByteVector(data); }
  public static void startAuxiliaryVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endMetadata(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Metadata get(int j) { return get(new Metadata(), j); }
    public Metadata get(Metadata obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

